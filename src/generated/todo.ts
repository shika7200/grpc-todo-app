// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: todo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "todo";

export interface CreateTodoRequest {
  title: string;
  description: string;
}

export interface ListTodosRequest {
}

export interface ListTodosResponse {
  todos: Todo[];
}

export interface Todo {
  id: number;
  title: string;
  description: string;
  completed: boolean;
}

function createBaseCreateTodoRequest(): CreateTodoRequest {
  return { title: "", description: "" };
}

export const CreateTodoRequest: MessageFns<CreateTodoRequest> = {
  encode(message: CreateTodoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTodoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTodoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTodoRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateTodoRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(base?: I): CreateTodoRequest {
    return CreateTodoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTodoRequest>, I>>(object: I): CreateTodoRequest {
    const message = createBaseCreateTodoRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseListTodosRequest(): ListTodosRequest {
  return {};
}

export const ListTodosRequest: MessageFns<ListTodosRequest> = {
  encode(_: ListTodosRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTodosRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTodosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListTodosRequest {
    return {};
  },

  toJSON(_: ListTodosRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTodosRequest>, I>>(base?: I): ListTodosRequest {
    return ListTodosRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTodosRequest>, I>>(_: I): ListTodosRequest {
    const message = createBaseListTodosRequest();
    return message;
  },
};

function createBaseListTodosResponse(): ListTodosResponse {
  return { todos: [] };
}

export const ListTodosResponse: MessageFns<ListTodosResponse> = {
  encode(message: ListTodosResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.todos) {
      Todo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTodosResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTodosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.todos.push(Todo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTodosResponse {
    return { todos: globalThis.Array.isArray(object?.todos) ? object.todos.map((e: any) => Todo.fromJSON(e)) : [] };
  },

  toJSON(message: ListTodosResponse): unknown {
    const obj: any = {};
    if (message.todos?.length) {
      obj.todos = message.todos.map((e) => Todo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTodosResponse>, I>>(base?: I): ListTodosResponse {
    return ListTodosResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTodosResponse>, I>>(object: I): ListTodosResponse {
    const message = createBaseListTodosResponse();
    message.todos = object.todos?.map((e) => Todo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTodo(): Todo {
  return { id: 0, title: "", description: "", completed: false };
}

export const Todo: MessageFns<Todo> = {
  encode(message: Todo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.completed !== false) {
      writer.uint32(32).bool(message.completed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Todo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.completed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Todo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      completed: isSet(object.completed) ? globalThis.Boolean(object.completed) : false,
    };
  },

  toJSON(message: Todo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.completed !== false) {
      obj.completed = message.completed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Todo>, I>>(base?: I): Todo {
    return Todo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Todo>, I>>(object: I): Todo {
    const message = createBaseTodo();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.completed = object.completed ?? false;
    return message;
  },
};

export interface TodoServiceImplementation<CallContextExt = {}> {
  createTodo(request: CreateTodoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Todo>>;
  listTodos(request: ListTodosRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListTodosResponse>>;
}

export interface TodoServiceClient<CallOptionsExt = {}> {
  createTodo(request: DeepPartial<CreateTodoRequest>, options?: CallOptions & CallOptionsExt): Promise<Todo>;
  listTodos(request: DeepPartial<ListTodosRequest>, options?: CallOptions & CallOptionsExt): Promise<ListTodosResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
